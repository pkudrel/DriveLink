/**
 * Templates Module for SimpleToken CLI Tool
 * Generate configuration files and code snippets
 *
 * Provides ready-to-use templates and configurations for DriveLink
 */

const fs = require('fs');
const path = require('path');

// Color utilities (consistent with main CLI)
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    green: '\x1b[32m',
    blue: '\x1b[34m',
    yellow: '\x1b[33m',
    red: '\x1b[31m',
    cyan: '\x1b[36m',
    magenta: '\x1b[35m'
};

function log(msg, color = colors.reset) {
    console.log(`${color}${msg}${colors.reset}`);
}

/**
 * Generate .env template for local development
 * @param {string} clientId - OAuth client ID
 * @param {string} clientSecret - OAuth client secret
 * @returns {string} .env file content
 */
function generateEnvTemplate(clientId, clientSecret) {
    return `# DriveLink Google Drive API Configuration
# Generated by SimpleToken CLI Tool
#
# IMPORTANT: Keep these credentials secure!
# - Don't commit this file to version control
# - Add .env to your .gitignore file

# OAuth 2.0 Credentials from Google Cloud Console
GOOGLE_CLIENT_ID=${clientId || 'YOUR_CLIENT_ID_HERE'}
GOOGLE_CLIENT_SECRET=${clientSecret || 'YOUR_CLIENT_SECRET_HERE'}

# OAuth Configuration
GOOGLE_REDIRECT_URI=http://localhost:8080/callback
GOOGLE_SCOPE=https://www.googleapis.com/auth/drive.file

# Token Storage (filled automatically after OAuth flow)
GOOGLE_ACCESS_TOKEN=
GOOGLE_REFRESH_TOKEN=
GOOGLE_TOKEN_EXPIRY=

# DriveLink Plugin Settings
DRIVELINK_SYNC_FOLDER_ID=
DRIVELINK_AUTO_SYNC=true
DRIVELINK_SYNC_INTERVAL=300000

# Generated on ${new Date().toISOString()}
`;
}

/**
 * Generate JSON configuration for DriveLink plugin
 * @param {object} tokens - Token object with access/refresh tokens
 * @returns {string} JSON configuration
 */
function generatePluginConfig(tokens) {
    const config = {
        version: "1.0",
        generated: new Date().toISOString(),
        source: "SimpleToken CLI Tool",
        oauth: {
            access_token: tokens?.accessToken || "YOUR_ACCESS_TOKEN_HERE",
            refresh_token: tokens?.refreshToken || "YOUR_REFRESH_TOKEN_HERE",
            token_type: tokens?.tokenType || "Bearer",
            expires_in: tokens?.expiresIn || 3600,
            scope: tokens?.scope || "https://www.googleapis.com/auth/drive.file"
        },
        drivelink: {
            syncFolderId: "",
            autoSync: true,
            syncInterval: 300000,
            backupCount: 5
        }
    };

    return JSON.stringify(config, null, 2);
}

/**
 * Generate README instructions for using generated tokens
 * @param {object} options - Configuration options
 * @returns {string} README content
 */
function generateReadmeInstructions(options = {}) {
    const { clientId, hasTokens, pluginVersion } = options;

    return `# DriveLink Plugin - Token Setup Instructions

Generated by SimpleToken CLI Tool on ${new Date().toLocaleDateString()}

## üìã Your Google Drive API Setup

### ‚úÖ Completed Steps:
- [x] Google Cloud project created
- [x] Google Drive API enabled
- [x] OAuth 2.0 credentials configured
${hasTokens ? '- [x] Access tokens generated' : '- [ ] Access tokens generated (in progress)'}

### üîë Your Credentials:
- **Client ID**: \`${clientId || 'Not yet configured'}\`
- **Client Secret**: ‚ö†Ô∏è Stored securely (not shown here)
${hasTokens ? '- **Access Token**: ‚úÖ Generated and ready to use' : '- **Access Token**: ‚è≥ Generate using SimpleToken CLI'}

## üöÄ Using Tokens in DriveLink Plugin

### Method 1: Direct Copy-Paste
1. Open Obsidian
2. Go to Settings ‚Üí Community Plugins ‚Üí DriveLink
3. Paste your access token in the "Access Token" field
4. Configure your sync folder ID
5. Enable auto-sync if desired

### Method 2: Configuration File
1. Copy the generated \`drivelink-config.json\` to your vault
2. Import the configuration in DriveLink settings
3. Verify the connection

### Method 3: Environment Variables
1. Use the generated \`.env\` file for development
2. Set environment variables in your system
3. DriveLink will automatically detect them

## üîß Troubleshooting

### Token Expired?
Run the SimpleToken CLI tool again:
\`\`\`bash
npm run simple-token
\`\`\`

### Need Help?
- Run: \`npm run simple-token -- --help\`
- Check status: \`npm run simple-token -- --status\`
- Reset setup: \`npm run simple-token -- --reset\`
- View guide: \`npm run simple-token -- --guide\`

### Common Issues:
1. **"Invalid token"** - Token may be expired, regenerate it
2. **"Permission denied"** - Check that Google Drive API scope is correct
3. **"Folder not found"** - Verify your Google Drive folder ID

## üîí Security Best Practices

- ‚úÖ Tokens are stored securely in your home directory
- ‚úÖ Client secret is obfuscated (not encrypted)
- ‚ö†Ô∏è Don't share your tokens publicly
- ‚ö†Ô∏è Don't commit tokens to version control
- ‚úÖ Tokens can be regenerated anytime if compromised

## üìñ Additional Resources

- [Google Drive API Documentation](https://developers.google.com/drive/api/v3/about-sdk)
- [OAuth 2.0 for Installed Applications](https://developers.google.com/identity/protocols/oauth2/native-app)
- [DriveLink Plugin Documentation](https://github.com/your-username/drivelink)

---
*Generated by SimpleToken CLI Tool - making Google Drive API setup as simple as chrome-webstore-upload-keys*
`;
}

/**
 * Generate PowerShell script for Windows users
 * @param {object} tokens - Token object
 * @returns {string} PowerShell script content
 */
function generatePowerShellScript(tokens) {
    return `# DriveLink Token Setup Script
# Generated by SimpleToken CLI Tool
# Run this script to set up DriveLink tokens automatically

Write-Host "üîê DriveLink Token Setup" -ForegroundColor Cyan
Write-Host "Generated on ${new Date().toISOString()}" -ForegroundColor Gray

# Set environment variables
$env:DRIVELINK_ACCESS_TOKEN = "${tokens?.accessToken || 'YOUR_ACCESS_TOKEN_HERE'}"
$env:DRIVELINK_REFRESH_TOKEN = "${tokens?.refreshToken || 'YOUR_REFRESH_TOKEN_HERE'}"

# Verify tokens are set
if ($env:DRIVELINK_ACCESS_TOKEN -eq "YOUR_ACCESS_TOKEN_HERE") {
    Write-Host "‚ö†Ô∏è  Tokens not yet configured" -ForegroundColor Yellow
    Write-Host "   Run: npm run simple-token" -ForegroundColor Cyan
} else {
    Write-Host "‚úÖ Tokens configured successfully" -ForegroundColor Green
}

Write-Host ""
Write-Host "üöÄ Ready to use DriveLink plugin!" -ForegroundColor Magenta

# Keep window open
Write-Host "Press any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
`;
}

/**
 * Generate Bash script for Linux/Mac users
 * @param {object} tokens - Token object
 * @returns {string} Bash script content
 */
function generateBashScript(tokens) {
    return `#!/bin/bash
# DriveLink Token Setup Script
# Generated by SimpleToken CLI Tool
# Run this script to set up DriveLink tokens automatically

echo "üîê DriveLink Token Setup"
echo "Generated on ${new Date().toISOString()}"

# Set environment variables
export DRIVELINK_ACCESS_TOKEN="${tokens?.accessToken || 'YOUR_ACCESS_TOKEN_HERE'}"
export DRIVELINK_REFRESH_TOKEN="${tokens?.refreshToken || 'YOUR_REFRESH_TOKEN_HERE'}"

# Verify tokens are set
if [ "$DRIVELINK_ACCESS_TOKEN" = "YOUR_ACCESS_TOKEN_HERE" ]; then
    echo "‚ö†Ô∏è  Tokens not yet configured"
    echo "   Run: npm run simple-token"
else
    echo "‚úÖ Tokens configured successfully"
fi

echo ""
echo "üöÄ Ready to use DriveLink plugin!"

# Add to shell profile (optional)
read -p "Add tokens to your shell profile? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "export DRIVELINK_ACCESS_TOKEN=\"$DRIVELINK_ACCESS_TOKEN\"" >> ~/.bashrc
    echo "export DRIVELINK_REFRESH_TOKEN=\"$DRIVELINK_REFRESH_TOKEN\"" >> ~/.bashrc
    echo "‚úÖ Added to ~/.bashrc"
    echo "   Restart your terminal or run: source ~/.bashrc"
fi
`;
}

/**
 * Generate complete setup package with all files
 * @param {object} data - Setup data including credentials and tokens
 * @param {string} outputDir - Directory to write files
 * @returns {boolean} Success status
 */
function generateSetupPackage(data, outputDir = './drivelink-setup') {
    try {
        // Create output directory
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
        }

        const { credentials, tokens } = data;

        // Generate all template files
        const files = [
            {
                name: '.env.template',
                content: generateEnvTemplate(credentials?.clientId, credentials?.clientSecret)
            },
            {
                name: 'drivelink-config.json',
                content: generatePluginConfig(tokens)
            },
            {
                name: 'README.md',
                content: generateReadmeInstructions({
                    clientId: credentials?.clientId,
                    hasTokens: !!tokens?.accessToken,
                    pluginVersion: '1.0.0'
                })
            },
            {
                name: 'setup.ps1',
                content: generatePowerShellScript(tokens)
            },
            {
                name: 'setup.sh',
                content: generateBashScript(tokens)
            }
        ];

        // Write all files
        files.forEach(file => {
            const filePath = path.join(outputDir, file.name);
            fs.writeFileSync(filePath, file.content, 'utf8');

            // Make shell scripts executable
            if (file.name.endsWith('.sh')) {
                try {
                    fs.chmodSync(filePath, 0o755);
                } catch (error) {
                    // Ignore chmod errors on Windows
                }
            }
        });

        log(`üì¶ Setup package created successfully`, colors.green);
        log(`   Location: ${outputDir}`, colors.cyan);
        log(`   Files: ${files.length} generated`, colors.blue);

        return true;

    } catch (error) {
        log(`‚ùå Failed to generate setup package: ${error.message}`, colors.red);
        return false;
    }
}

/**
 * Display copy-paste ready token for immediate use
 * @param {object} tokens - Token object
 */
function showCopyPasteToken(tokens) {
    if (!tokens || !tokens.accessToken) {
        log(`‚ùå No tokens available to display`, colors.red);
        return;
    }

    log(`\nüéØ Copy-Paste Ready Token:`, colors.bright);
    log(`${colors.cyan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${colors.reset}`);
    log(`${colors.green}${tokens.accessToken}${colors.reset}`);
    log(`${colors.cyan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${colors.reset}`);

    log(`\nüìã Usage Instructions:`, colors.blue);
    log(`1. Copy the token above (Ctrl+C / Cmd+C)`, colors.cyan);
    log(`2. Open Obsidian ‚Üí Settings ‚Üí Community Plugins ‚Üí DriveLink`, colors.cyan);
    log(`3. Paste the token in the "Access Token" field`, colors.cyan);
    log(`4. Save settings and test the connection`, colors.cyan);

    if (tokens.refreshToken) {
        log(`\nüîÑ Refresh Token Available:`, colors.yellow);
        log(`This token will automatically refresh when it expires.`, colors.cyan);
    }

    if (tokens.expiresAt) {
        log(`\n‚è∞ Token Expires:`, colors.blue);
        log(`${tokens.expiresAt}`, colors.cyan);
    }
}

module.exports = {
    generateEnvTemplate,
    generatePluginConfig,
    generateReadmeInstructions,
    generatePowerShellScript,
    generateBashScript,
    generateSetupPackage,
    showCopyPasteToken
};